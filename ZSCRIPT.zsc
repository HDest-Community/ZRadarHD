version "4.6"

class ZRadarHDHandler : ZRadarMainHandler
{
	override void WorldLoaded(WorldEvent e)
	{
		DestroyMainHandler();
		Super.WorldLoaded(e);
	}

	override double GetAlpha()
	{
		double OriginalAlpha = Super.GetAlpha();
		let plr = HDPlayerPawn(players[consoleplayer].mo);
		if (plr)
		{
			let Radar = PortableZRadar(plr.FindInventory('PortableZRadar'));
			if (Radar)
			{
				OriginalAlpha *= clamp(Radar.WeaponStatus[Radar.ZRProp_Battery] / 13.0, 0.4, 1.0);
			}
		}
		return OriginalAlpha;
	}

	override double GetDrainMult()
	{
		double angleLimit = clamp(AngleLimit.GetInt(), 0, 360);
		if (angleLimit == 0)
		{
			angleLimit = players[consoleplayer].FOV;
		}
		double distMult = max(HDCONST_ONEMETRE * 20.0, ScanDistance.GetInt(), OverscanDistance.GetInt() * 0.8) / (HDCONST_ONEMETRE * 20.0);
		double mult = Super.GetDrainMult() * (angleLimit / 180.0) * distMult;

		if (RadarMode[consoleplayer] == Mode_Disabled)
		{
			mult = min(mult, 0.10);
		}
		return mult;
	}

	override bool CheckRadarCondition(PlayerPawn plr)
	{
		PortableZRadar Radar = PortableZRadar(plr.FindInventory("PortableZRadar"));
		return Radar && Radar.WeaponStatus[Radar.ZRProp_Battery] > 0;
	}

	override void CheckReplacement(ReplaceEvent e)
	{
		if (!e.Replacement)
		{
			return;
		}

		switch (e.Replacement.GetClassName())
		{
			case 'HDMap':
				if (random[zrdhdrand]() <= 64)
				{
					e.Replacement = "PortableZRadar";
				}
				break;
		}
	}

	override void WorldThingSpawned(WorldEvent e)
	{
		let bat = HDBattery(e.Thing);
		if (bat)
		{
			bat.ItemsThatUseThis.Push("PortableZRadar");
		}
	}

	override RadarBlip TryMakeBlip(int mode, int toggles, PlayerPawn plr, Actor other)
	{
		if (!plr || !other)
		{
			return null;
		}

		// [Ace] Pick the ones you want to check in each condition below.
		bool full = mode == Mode_Full;
		bool movement = mode == Mode_Movement && (other.vel.length() > 0 || (other.pos - other.Prev).length() > 0 || other.master is 'PlayerPawn');
		bool local = mode == Mode_Local && plr.CheckSight(other);

		if (full || mode == Mode_Movement || local)
		{
			if (toggles & 1 << 3 && (other is 'PortableMedikit' || other is 'HDInjectorMaker' && !(other is 'BluePotion')))
			{
				return RadarBlip.Create(plr, other, "BLPCROSS", RadarBlip.Col_Red, drawBox: (4, 4));
			}
			if (toggles & 1 << 4 && other is 'HDArmour')
			{
				return RadarBlip.Create(plr, other, "BLPCROSS", RadarBlip.Col_Blue, drawBox: (4, 4));
			}
			if (toggles & 1 << 5 && (other is 'BluePotion' || other is 'SpiritualArmour' || other is 'HDBlursphere' || other is 'BlueSphere' || other is 'BrownSphere' || other is 'GreenSphere' || other is 'SquadSummoner'))
			{
				return RadarBlip.Create(plr, other, "BLPCROSS", RadarBlip.Col_Green, drawBox: (4, 4));
			}
			if (toggles & 1 << 6 && other is 'Weapon')
			{
				return RadarBlip.Create(plr, other, "BLPSTAR", RadarBlip.Col_Gold);
			}
			if (toggles & 1 << 7 && other is 'HDMagAmmo')
			{
				let mag = HDMagAmmo(other);
				if (mag.Mags[mag.Mags.Size() - 1] == mag.MaxPerUnit)
				{
					return RadarBlip.Create(plr, other, "BLPSQARE", RadarBlip.Col_Tan, drawBox: (3, 3));
				}
			}
			if (toggles & 1 << 8 && other is 'HDAmBox')
			{
				return RadarBlip.Create(plr, other, "BLPSTAR", RadarBlip.Col_Tan);
			}
			if (toggles & 1 << 9 && other is 'HDBackpack')
			{
				return RadarBlip.Create(plr, other, "BLPSTAR", RadarBlip.Col_Pink);
			}
			if (toggles & 1 << 10 && other.GetClass() == 'BFGNecroShard')
			{
				return RadarBlip.Create(plr, other, "BLPDOT", RadarBlip.Col_BlueGreen, drawBox: (3, 3));
			}
			if (toggles & 1 << 11 && other.bCOUNTITEM) // [Ace] There are no HD items that are COUNTITEM so anything that counts towards this tally is from some other source, hence the lack of other checks.
			{
				return RadarBlip.Create(plr, other, "BLPSQARE", RadarBlip.Col_Red, drawBox: (3, 3));
			}
		}
		
		return Super.TryMakeBlip(mode, toggles, plr, other);
	}
}

class PortableZRadar : HDWeapon
{
	enum ZRProperty
	{
		ZRProp_Flags,
		ZRProp_UseOffset,
		ZRProp_Battery,
		ZRProp_DrainTicker
	}

	action void A_AddOffset(int ofs)
	{
		invoker.WeaponStatus[ZRProp_UseOffset] += ofs;
	}

	override bool AddSpareWeapon(actor newowner) { return AddSpareWeaponRegular(newowner); }
	override HDWeapon GetSpareWeapon(actor newowner , bool reverse, bool doselect) { return GetSpareWeaponRegular(newowner, reverse, doselect); }
	override string, double GetPickupSprite() { return "ZRDRA0", 0.3; }
	override string GetHelpText()
	{
		string BaseString = WEPHELP_RELOAD.."  Reload battery\n"
		..WEPHELP_UNLOAD.."  Unload battery";
		return BaseString;
	}
	override double WeaponBulk() { return 8 + (WeaponStatus[ZRProp_Battery] >= 0 ? ENC_BATTERY_LOADED : 0); }
	override void InitializeWepStats(bool idfa)
	{
		WeaponStatus[ZRProp_Battery] = 20;
	}

	override void DoEffect()
	{
		if (!Handler)
		{
			Handler = ZRadarHDHandler(EventHandler.Find("ZRadarHDHandler"));
		}

		int mode = Handler.RadarMode[owner.PlayerNumber()];
		if (WeaponStatus[ZRProp_Battery] > 0)
		{
			if (++WeaponStatus[ZRProp_DrainTicker] > (35 * 90) / Handler.GetDrainMult())
			{
				WeaponStatus[ZRProp_Battery]--;
				WeaponStatus[ZRProp_DrainTicker] = 0;
			}
		}

		Super.DoEffect();
	}

	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl)
	{
		vector2 bob = hpl.hudbob * 0.3;
		int Offset = WeaponStatus[ZRProp_UseOffset];
		bob.y += Offset;
		int BaseYOffset = 0;
		
		sb.DrawImage("ZRDRA0", (0, BaseYOffset) + bob, sb.DI_SCREEN_CENTER | sb.DI_ITEM_CENTER, alpha: 1.0, scale:(2, 2));
		int bat = hdw.WeaponStatus[ZRProp_Battery];
		if (bat >= 0)
		{
			sb.DrawImage(AceCore.GetBatteryColor(bat), (0, 40) + bob, sb.DI_SCREEN_CENTER | sb.DI_ITEM_CENTER, scale: (2.0, 2.0));
		}
	}

	ZRadarHDHandler Handler;
	private bool HasToggled;

	Default
	{
		+HDWEAPON.FITSINBACKPACK
		+INVENTORY.INVBAR
		+WEAPON.WIMPY_WEAPON
		-HDWEAPON.DROPTRANSLATION
		Inventory.MaxAmount 5;
		Inventory.Icon "ZRDRA0";
		Inventory.PickupSound "weapons/pocket";
		Inventory.PickupMessage "You picked up a portable radar.";
		Tag "Portable Radar";
		HDWeapon.RefId "zrd";
		Scale 0.2;
	}

	States
	{
		Spawn:
			ZRDR BA 6 NoDelay A_SetTics(invoker.WeaponStatus[ZRProp_Battery] == -1 ? -1 : random(4, 8));
			Loop;
		Select:
			TNT1 A 0 A_AddOffset(100);
			Goto Super::Select;
		Ready:
			TNT1 A 1
			{
				if (PressingUser3())
				{
					A_MagManager("HDBattery");
					return;
				}

				int off = invoker.WeaponStatus[ZRProp_UseOffset];
				if (off > 0)
				{
					invoker.WeaponStatus[ZRProp_UseOffset] = off * 2 / 3;
				}

				A_WeaponReady(WRF_ALL | WRF_NOFIRE);
			}
			Goto ReadyEnd;
		Unload:
			TNT1 A 20;
			TNT1 A 5
			{
				int Bat = invoker.WeaponStatus[ZRProp_Battery];
				if (Bat < 0)
				{
					return;
				}
				if (PressingUnload() || PressingReload())
				{
					HDBattery.GiveMag(self, "HDBattery", Bat);
					A_StartSound("weapons/pocket", 9);
					A_SetTics(20);
				}
				else
				{
					HDBattery.SpawnMag(self, "HDBattery", Bat);
				}
				invoker.WeaponStatus[ZRProp_Battery] = -1;
			}
			Goto ReloadEnd;
		Reload:
			TNT1 A 14 A_StartSound("weapons/pocket", 9);
			TNT1 A 5
			{
				if (invoker.WeaponStatus[ZRProp_Battery] >= 0)
				{
					return;
				}
				let Bat = HDBattery(FindInventory("HDBattery"));
				if(!Bat)
				{
					return;
				}
				int Amt = Bat.TakeMag(true);
				invoker.WeaponStatus[ZRProp_Battery] = Amt;
				A_StartSound("weapons/vulcopen1", 8, CHANF_OVERLAP);
			}
			Goto ReloadEnd;
		ReloadEnd:
			TNT1 A 6;
			Goto ready;
	}
}
